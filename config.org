#+Title: Yay-Evil distro by Ian Y.E. Pan
#+Author: Ian Y.E. Pan
#+Date: 2019
* Cleaning up the UI and enhance some basic defaults defined in C Source Code
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore       ; minimize distraction
        default-directory "~/")

  ;; literally every YouTube tutorial starts with this
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  ;; replace the active region just by typing text, just like modern editors
  (delete-selection-mode +1)

  ;; show column number in mode-line
  (column-number-mode +1)

  ;; better scrolling experience
  (setq scroll-margin 0
        scroll-conservatively 10000
        scroll-preserve-screen-position t
        auto-window-vscroll nil)

  ;; increase line space for better readability
  (setq-default line-spacing 3)

  ;; Always use spaces for indentation (default to 4 spaces).
  (setq-default indent-tabs-mode nil
                tab-width 2)
#+END_SRC
* Configuration for built-in packages
Since we're using use-package as our package management system, we might as well try to organize under the same syntax as much as possible to keep the configuration consistent.
** Split right and split below
The Emacs default split doesn't seem too intuitive for the majority of users.
#+BEGIN_SRC emacs-lisp
  (use-package "window"
    :ensure nil
    :config
    (defun ian/split-and-follow-horizontally ()
      "Split window below."
      (interactive)
      (split-window-below)
      (other-window 1))
    (defun ian/split-and-follow-vertically ()
      "Split window right."
      (interactive)
      (split-window-right)
      (other-window 1))
    (global-set-key (kbd "C-x 2") 'ian/split-and-follow-horizontally)
    (global-set-key (kbd "C-x 3") 'ian/split-and-follow-vertically))
#+END_SRC
** Don't bother confirming killing processes and don't let backup~ files scatter around
#+BEGIN_SRC emacs-lisp
  (use-package files
    :ensure nil
    :config
    (setq confirm-kill-processes nil
          make-backup-files nil))
#+END_SRC
** Automatically refreshes the buffer for changes outside of Emacs
Auto refreshes every 2 seconds. Don't forget to refresh the version control status as well.
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :hook (after-init . global-auto-revert-mode)
    :config
    (setq auto-revert-interval 2
          auto-revert-check-vc-info t
          auto-revert-verbose nil))
#+END_SRC
** Eldoc: documentation in the mini-buffer
Only use eldoc in prog-mode (by defaults it's turned on globally, but reports say it hinders performance).
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :ensure nil
    :diminish eldoc-mode
    :config
    (global-eldoc-mode -1)
    (add-hook 'prog-mode-hook 'eldoc-mode)
    (setq eldoc-idle-delay 0.4))
#+END_SRC
** Indentation improvement
Use four spaces for indentation in C. Also change the formatting style from GNU (the default) to the more standard K&R. For JavaScript, we use 2 spaces instead.
#+BEGIN_SRC emacs-lisp
  (use-package cc-vars
    :ensure nil
    :config
    (setq-default c-basic-offset 4)
    (setq c-default-style '((java-mode . "java")
                            (awk-mode . "awk")
                            (other . "k&r"))))

  (use-package js
    :ensure nil
    :config (setq js-indent-level 2))
#+END_SRC
** Give mouse wheel (track-pad) scroll a reasonable speed
By default, the scrolling is way too fast to be precise and helpful, let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
  (use-package mwheel
    :ensure nil
    :config (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
                  mouse-wheel-progressive-speed nil))
#+END_SRC
** Show matching parentheses
Reduce the highlight delay to instantly.
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :ensure nil
    :config
    (setq show-paren-delay 0)
    (show-paren-mode +1))
#+END_SRC
** Setting up some frame defaults
Maximize the frame by default on start-up. Set the font size to 13.
#+BEGIN_SRC emacs-lisp
  (use-package frame
    :ensure nil
    :config
    (setq initial-frame-alist (quote ((fullscreen . maximized))))
    (set-frame-font "Hack" nil t))
#+END_SRC
** Ediff tweaks
Enter ediff with side-by-side buffers to better compare the differences.
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :ensure nil
    :config (setq ediff-split-window-function 'split-window-horizontally))
#+END_SRC
** Check word-spellings in strings and comments
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :ensure nil
    :hook (prog-mode . flyspell-prog-mode))
#+END_SRC
** Auto-pairing quotes and parentheses etc.
Electric-pair-mode has improved quite a bit in recent Emacs versions. No longer need an extra package for this. It also takes care of the new-line-and-push-brace feature.
#+BEGIN_SRC emacs-lisp
  (use-package elec-pair
    :ensure nil
    :config (add-hook 'prog-mode-hook 'electric-pair-mode))
#+END_SRC
** Clean up whitespace and unnecessary empty lines on save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :config (add-hook 'before-save-hook 'whitespace-cleanup))
#+END_SRC
* Third-party packages
Many Emacsers love having tons of packages -- and that's absolutely fine! However, one of the goals of the Yay-Evil distro is to provide an essential-only foundation for users to build upon. Therefore, only the most important packages and/or lightweight improvements will be included here. For example, completion frameworks like Ivy or Helm are considered heavy by many, yet the built-in Ido serves almost the same purpose. The only arguably opinionated package is probably Evil, but hey! You saw that coming from the distro name, didn't you ;) ?
** Dashboard welcome page
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo
          dashboard-banner-logo-title "Yay Evil!"
          dashboard-items nil
          dashboard-set-footer nil))
#+END_SRC
** Company for auto-completion
Use ~C-n~ and ~C-p~ to navigate the tooltip
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :hook (prog-mode . company-mode)
    :config
    (setq company-minimum-prefix-length 1
          company-idle-delay 0
          company-selection-wrap-around t
          company-tooltip-align-annotations t
          company-frontends '(company-pseudo-tooltip-frontend ; show tooltip even for single candidate
                              company-echo-metadata-frontend))
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "C-n") 'company-select-next)
      (define-key company-active-map (kbd "C-p") 'company-select-previous)))
#+END_SRC
** Flycheck
A modern on-the-fly syntax checking extension -- absolutely essential
#+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :hook (after-init . global-flycheck-mode))
#+END_SRC
** Ido, ido-vertical, and flex-matching
Selecting buffers/files with great efficiency. In my opinion, Ido is enough to replace Ivy and Helm. We install ido-vertical to get a better view of the available options (use ~C-n~, ~C-p~ or arrow keys to navigate). Flex matching is a nice touch and we are lucky to have flx-ido for that purpose.
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :hook ((after-init . ido-mode)
           (after-init . ido-vertical-mode))
    :config
    (setq ido-everywhere t
          ido-enable-flex-matching t
          ido-vertical-define-keys 'C-n-C-p-up-and-down))

  (use-package flx-ido :config (flx-ido-mode +1))
#+END_SRC
** Magit
Magit -- need I say more? The best git interface ever.
#+BEGIN_SRC emacs-lisp
  (use-package magit :bind (("C-x g" . magit-status) ("C-c g" . magit-file-dispatch)))
#+END_SRC
** Org Mode
Some minimal org mode tweaks
#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook ((org-mode . visual-line-mode)
           (org-mode . org-indent-mode))
    :config
    (with-eval-after-load 'org
      (define-key org-mode-map (kbd "C-<tab>") nil))
    (use-package org-bullets :hook (org-mode . org-bullets-mode)))
#+END_SRC
** Which-key
Provides you with hints on available keystroke combinations.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :defer 1
    :config
    (which-key-mode +1)
    (setq which-key-idle-delay 0.4
          which-key-idle-secondary-delay 0.4))
#+END_SRC
** Yasnippet & yasnippet-snippets
Use TAB to expand snippets. The code snippet below also avoids clashing with company-mode.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :config
    (yas-global-mode +1)
    (advice-add 'company-complete-common
                :before
                (lambda ()
                  (setq my-company-point (point))))
    (advice-add 'company-complete-common
                :after
                (lambda ()
                  (when (equal my-company-point (point))
                    (yas-expand)))))
#+END_SRC
** Markdown mode, JSON mode, Yaml mode, Dockerfile mode
Some useful but missing major modes
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode :hook (markdown-mode . visual-line-mode))

  (use-package json-mode)

  (use-package yaml-mode :mode ("\\.ya?ml\\'" . yaml-mode))

  (use-package dockerfile-mode :mode ("Dockerfile\\'" . dockerfile-mode))
#+END_SRC
** Configure PATH on macOS
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config (when (memq window-system '(mac ns x))
              (exec-path-from-shell-initialize)))
#+END_SRC
** Lightweight syntax highlighting improvement for numbers, operators, and escape sequences
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers :hook (prog-mode . highlight-numbers-mode))
  (use-package highlight-operators :hook (prog-mode . highlight-operators-mode))
  (use-package highlight-escape-sequences :hook (prog-mode . hes-mode))
#+END_SRC
** Lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook ((c-mode
            c-or-c++-mode
            java-mode
            js-mode
            python-mode
            web-mode) . lsp)
    :commands lsp
    :config
    (setq lsp-prefer-flymake nil)
    (setq lsp-enable-symbol-highlighting nil)
    (use-package lsp-java :after lsp))

  (use-package company-lsp
    :commands company-lsp
    :config (setq company-lsp-cache-candidates 'auto))

  (use-package web-mode
    :mode (("\\.tsx?\\'" . web-mode)
           ("\\.html?\\'" . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-css-indent-offset 2))
#+END_SRC
